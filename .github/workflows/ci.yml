name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
      - staging # for bors
      - trying # for bors
  schedule:
    - cron: "0 0 * * 0"

jobs:
  build:
    name: Build (${{ matrix.TARGET }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        TOOLCHAIN: [stable]
        TARGET:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv5te-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.TOOLCHAIN }}
          target: ${{ matrix.TARGET }}
          profile: minimal
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --locked --target ${{ matrix.TARGET }}

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build test binary
        run: cargo build --bin halp-test

      - name: Generate code coverage
        run: cargo llvm-cov --lcov --output-path lcov.info
        env:
          NO_COLOR: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: code-coverage-report
          files: lcov.info
          fail_ci_if_error: true
          verbose: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v3
      - name: Checkout the repository
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests -- -D warnings

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check licenses sources

      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run committed
        uses: crate-ci/committed@master
        with:
          args: "-vv"
          commits: "HEAD"

      - name: Run lychee
        uses: lycheeverse/lychee-action@v1
        with:
          args: -v *.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run codespell
        uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: true
          ignore_words_file: .codespellignore
          skip: target,.git

      - name: Run cargo-msrv
        shell: bash
        run: |
          curl -s 'https://api.github.com/repos/foresterre/cargo-msrv/releases' | \
            jq -r "[.[] | select(.prerelease == false)][0].assets[] | \
            select(.name | ascii_downcase | test(\"linux.*x86_64|x86_64.*linux\")).browser_download_url" | \
            wget -qi -
          tar -xvf cargo-msrv*.tar* -C  ~/.cargo/bin/ cargo-msrv
          printf "%s" "Checking MSRV for $package..."
          cargo msrv --output-format json verify | tail -n 1 | jq --exit-status '.success'
